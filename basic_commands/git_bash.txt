# add new file txt and edit:
 vim file_name
 
 and to quit press esc, then :wq!

# add new branch:
 git checkout -b branch_name

# switch between branches:
 git checkout branch_name

# list branches
 git branch

# write and quit from file:
 :wq!

# add changes:
 git add file_name

# add commit:
 git commit -m enter_commit_name

# push changes:
 git push

# merge branch to main:
 git pull origin branch_name_from_merge --allow-unrelated-histories
 or 
 git merge

# list branch logs:
 git log

# status:
 git status

# write to file:
 nano file_name
 
 and to write press ctrl+X

# remove untracked files:
 git clean .f file_name

# create new folder:
 mkdir folder_name

# rename folder name 
 mv old-name-dir/ new-name-dir

# go one step back:
 cd ..

# list directories:
 dir

# list files with details:
 ls -l

# move files between folders:
 mv file_name folder_name

 example: mv git_bash.txt instructions/

# Tell the command to automatically stage files that have been modified and deleted, but new files you have not told Git about are not affected:
 git commit -a -m "commit message here"

# to show hidden files in gitignore
 ls -a

# to clear/empty file
 > file_name

# to restore file with committed logs:
 git restore file_name

# create file:
 touch file_name

# write to file:
 echo "msg here" >> file_name

# tag commit:
 git tag tag_name

# list tags:
 git tag --list

# push tags to remote
 git push --tags

# check out from tag
 git checkout tag_name

# remove tag from remote
 git push --delete remote_name tag_name

 example: git push --delete destination ver1

# undo commit from remote but keep it staged:
 git reset --soft HEAD~1

# delete locally created branch:
 git branch -d branch_name

# delete branch from remote:
 git push -d <remote_name> <branch_name>

# rebase main branch to other branches:
 git rebase main

# push rebased commits to branch:
 git push origin HEAD --force

# see the versions of remote repo
 git remote -v

# remove the version of remote repo
 git remote remove remote_name

 example: git remote remove origin

# add new remote repo
 git remote add remote_name "ssh_key"

 example: git remote add destination "git@github.com:baharmahmudlu/learn-git-backup.git"

# remove last commit from locally and remote
 git reset HEAD~ # remove commit locally
 git push origin +HEAD # force-push the new HEAD commit

# remove last commit from remote but keep in locally
 git push origin +HEAD^:"$name_of_your_branch" # e.g. +HEAD^:master

# get remote URL of the project
git config --get remote.origin.url

# get full details of the remote of the project
git remote show origin
